package com.example.mankomania.apitests;

import static org.junit.jupiter.api.Assertions.*;

import com.example.mankomania.api.Lobby;
import com.example.mankomania.api.LobbyAPI;
import com.example.mankomania.api.Status;

import org.json.JSONException;
import org.json.JSONObject;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import okhttp3.Request;

public class LobbyAPITests {

    @Test
    void testGenerateStringArray() {
        List<Lobby> lobbies = new ArrayList<>();
        lobbies.add(new Lobby(null, "Lobby 1", "password1234", true, 4, Status.open));
        lobbies.add(new Lobby(null, "Lobby 2", "", false, 2, Status.open));
        lobbies.add(new Lobby(null, "Lobby 3", "password5678", true, 3, Status.open));

        String[] expectedArray = {
                "P | x/4 | Lobby 1",
                "O | x/2 | Lobby 2",
                "P | x/3 | Lobby 3"
        };

        String[] resultArray = LobbyAPI.generateStringArray(lobbies);

        assertArrayEquals(expectedArray, resultArray);
    }

    @ParameterizedTest
    @MethodSource("statusProvider")
    void testAddLobbyToList(String statusName, Status expectedStatus) throws JSONException {
        // prepare JSONObject with the given status
        JSONObject jsonLobby = new JSONObject();
        jsonLobby.put("id", UUID.randomUUID().toString());
        jsonLobby.put("name", "Test Lobby");
        jsonLobby.put("password", "password");
        jsonLobby.put("isprivate", true);
        jsonLobby.put("maxplayers", 4);
        jsonLobby.put("status", statusName);

        List<Lobby> lobbyList = new ArrayList<>();

        // call method
        LobbyAPI.addLobbyToList(jsonLobby, lobbyList);

        // get Lobby for comparison
        Lobby addedLobby = lobbyList.get(0);

        // verify
        assertEquals(1, lobbyList.size());
        assertEquals(expectedStatus, addedLobby.getStatus());
    }

    // data provider for status values and their corresponding Status enum
    // generated by ChatGPT because i suck at this
    private static Object[][] statusProvider() {
        return new Object[][] {
                { "open", Status.open },
                { "starting", Status.starting },
                { "inGame", Status.inGame },
                { "finished", Status.finished },
                { "closed", Status.closed }
        };
    }

    @Test
    void testAddLobbyToList_InvalidStatus() throws JSONException {
        // create a JSONObject with an invalid status
        JSONObject jsonLobby = new JSONObject();
        jsonLobby.put("id", UUID.randomUUID().toString());
        jsonLobby.put("name", "Test Lobby");
        jsonLobby.put("password", "password");
        jsonLobby.put("isprivate", true);
        jsonLobby.put("maxplayers", 4);
        jsonLobby.put("status", "invalid");

        List<Lobby> lobbyList = new ArrayList<>();

        // verify that IllegalArgumentException is thrown for invalid status
        assertThrows(IllegalArgumentException.class, () -> LobbyAPI.addLobbyToList(jsonLobby, lobbyList));
    }

    @Test
    void testCreatePublicJSONLobby() throws JSONException {
        // prepare input
        String name = "Test Lobby";
        String password = null;
        boolean isPrivate = false;
        int maxPlayers = 4;
        Status status = Status.open;

        // call method
        JSONObject jsonLobby = LobbyAPI.createJSONLobby(name, password, isPrivate, maxPlayers, status);

        // verify
        assertNotNull(jsonLobby);
        assertNotNull(jsonLobby);
        assertEquals(name, jsonLobby.getString("name"));
        assertEquals(JSONObject.NULL, jsonLobby.get("password"));
        assertEquals(isPrivate, jsonLobby.getBoolean("isPrivate"));
        assertEquals(maxPlayers, jsonLobby.getInt("maxPlayers"));
        assertEquals(status, jsonLobby.get("status"));
    }

    @Test
    void testCreatePrivateJSONLobby() throws JSONException {
        // prepare input
        String name = "Test Lobby";
        String password = "password";
        boolean isPrivate = true;
        int maxPlayers = 2;
        Status status = Status.open;

        // call method
        JSONObject jsonLobby = LobbyAPI.createJSONLobby(name, password, isPrivate, maxPlayers, status);

        // verify
        assertNotNull(jsonLobby);
        assertEquals(name, jsonLobby.getString("name"));
        assertEquals(password, jsonLobby.getString("password"));
        assertEquals(isPrivate, jsonLobby.getBoolean("isPrivate"));
        assertEquals(maxPlayers, jsonLobby.getInt("maxPlayers"));
        assertEquals(status, jsonLobby.get("status"));
    }

    @Test
    void testCreateGetRequestWithStatus() {
        // set up
        String token = "test_token";
        String path = "/api/lobby/getByStatus/";
        Status status = Status.open;

        // call method
        Request request = LobbyAPI.createGetRequest(token, path, status);

        // verify
        assertEquals("http://10.0.2.2:3000/api/lobby/getByStatus/open", request.url().toString());
    }

    @Test
    void testCreateGetRequestNoStatus() {
        // set up
        String token = "test_token";
        String path = "/api/lobby/getAll";
        Status status = null;

        // call method
        Request request = LobbyAPI.createGetRequest(token, path, status);

        // verify
        assertEquals("http://10.0.2.2:3000/api/lobby/getAll", request.url().toString());
    }

    @Test
    void testCreatePostRequest() throws JSONException {
        // set up
        JSONObject jsonLobby = new JSONObject();
        jsonLobby.put("name", "Test Lobby");
        jsonLobby.put("password", "password");
        jsonLobby.put("isPrivate", true);
        jsonLobby.put("maxPlayers", 2);
        jsonLobby.put("status", Status.open);

        String token = "test_token";
        String path = "/api/lobby/create";

        // call method
        Request request = LobbyAPI.createPostRequest(jsonLobby, token, path);

        // verify
        assertEquals("http://10.0.2.2:3000/api/lobby/create", request.url().toString());
    }
}

